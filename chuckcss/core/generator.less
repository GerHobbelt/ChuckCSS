/*
    == GENERATORS ==
*/

/*
** Mixins list **
    ._generateColorsClass
    ._generatePaddingMarginClass
    ._generateIcons
    ._generateColumns
    ._generateTabletColumns
    ._generatePhoneColumns
*/

/* *****
    @name : ._generateColorsClass
    @description : Generate colors styles when using "cc-{color}" class on an element
    @params : @aColors : array built in settings.less file
***** */
._generateColorsClass(@iterator:1) when(@iterator <= length(@aColors)) {
    @colorName: extract(extract(@aColors, @iterator),1);
    @colorValue : extract(extract(@aColors, @iterator),2);

    /* texts */
    h1,h2,h3,h4,h5,h6,
    p,div,section,aside,header,footer,
    span,i,a {
        &.cc{
            &-@{colorName} {
                color: @colorValue;
            }

            &-bg-@{colorName} {
                color:white;
                background-color:@colorValue;
            }
        }
    }



    /* Links / Buttons */
    a.btn,
    button {
        &.cc-bg-@{colorName} {
            color:@links-btn-tc;
            ._btn(@colorValue);
            border-color:@colorValue;

            &:hover {
                color:@links-btn-hover-tc;
                border-color:@colorValue;
            }

            /* Loading buttons : show white loader */
            &.cc-loading:before {
                border-color:white rgba(255,255,255,0.2) rgba(255,255,255,0.2) rgba(255,255,255,0.2);
            }
        }
    }

    ._generateColorsClass((@iterator + 1));
}
._generateColorsClass; // Launch _generateColorsClass



/* *****
    @name : ._generateIcons
    @description : Generate icons  when using fa- & -ion class
    @Used : in alerts, buttons, lists, messages, badges
***** */
._generateIcons() {

    [class*="fa-"],
    [class*="ion-"] {

        /* Icon */
        &:before {
            ._inline;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
            line-height: 1;
            font-style: normal;
            font-weight: normal;
            font-variant: normal;
            text-transform: none;
            text-rendering: auto;
            speak: none;
            margin-right: 10px;
        }

        li& {
            list-style:none;
            position:relative;

            &:before {
                position:absolute;
                left: -1.3em;
                top: 4px;
            }

            /* Override horizontal lists */
            ul.cc-horizontal & {
                &:before {
                    position:static;
                }
            }
        }
    }

    /* Ionicons */
    [class*="ion-"] {
        &:before {
            font-family: "Ionicons";
        }
    }

    /* FontAwesome */
    [class*="fa-"] {
        &:before {
            font-family: "FontAwesome";
        }
    }
}
._generateIcons; // Launch _generateIcons


/* *****
    @name : ._generateColumns
    @description : Generate columns width in flexbox parent
***** */
._generateColumns(@iterator:1) when(@iterator <= @cols-total) {

    .columns {
        /* NO GUTTERS */
        &.cc-no-gutter .column {
            &.cc {
                /* Width calculations without gutters */
                &-@{iterator} {
                    ._flex(0 0 auto);
                    width: ~'calc(100% * @{iterator} / @{cols-total} - 0.05px)'; // Substract 0.05px for IE compatibilities
                    max-width: ~'calc(100% * @{iterator} / @{cols-total}  - 0.05px)'; // Substract 0.05px for IE compatibilities
                }

                /* Offsets calculations without gutters */
                &-offset-@{iterator} {
                    margin-left: ~'calc(100% * @{iterator} / @{cols-total}  - 0.05px)'; // Substract 0.05px for IE compatibilities
                }
            }
        }

        /* GUTTERS */
        &.cc-gutter .column,
        .column {
            &.cc {
                /* Width calculations with gutters */
                &-@{iterator} {
                    ._flex(0 0 auto);
                    width: ~'calc(100% * @{iterator} / @{cols-total} - @{cols-gutter}  - 0.05px)'; // Substract 0.05px for IE compatibilities
                    max-width: ~'calc(100% * @{iterator} / @{cols-total} - @{cols-gutter}  - 0.05px)'; // Substract 0.05px for IE compatibilities
                }
                /* Offsets calculations with gutters */
                &-offset-@{iterator} {
                    margin-left: ~'calc(100% * @{iterator} / @{cols-total} + @{cols-gutter}/2  - 0.05px)'; // Substract 0.05px for IE compatibilities
                }
            }
        }
    }

    ._generateColumns((@iterator + 1));
}



/* *****
    @name : ._generateTabletColumns
    @description : Generate responsive tablet columns width in flexbox parent
***** */
._generateTabletColumns(@iterator:1) when(@iterator <= @cols-total) {

    .columns {

        /* NO GUTTERS */
        &.cc-no-gutter .column {
            &.cc{
                /* Width calculations without gutters */
                &-@{iterator}-t {
                    ._flex(0 0 auto);
                    width: ~'calc(100% * @{iterator} / @{cols-total})';
                    max-width: ~'calc(100% * @{iterator} / @{cols-total})';
                }

                /* Offsets calculations without gutters for tablets devices */
                &-offset-@{iterator}-t {
                    margin-left: ~'calc(100% * @{iterator} / @{cols-total})';
                }
            }
        }


        /* GUTTERS */
        &.cc-gutter .column,
        .column {
            &.cc {
                /* Width calculations with gutters */
                &-@{iterator}-t {
                    ._flex(0 0 auto);
                    width: ~'calc(100% * @{iterator} / @{cols-total} - @{cols-gutter})';
                    max-width: ~'calc(100% * @{iterator} / @{cols-total} - @{cols-gutter})';
                }

                /* Offsets calculations with gutters for tablets devices */
                &-offset-@{iterator}-t {
                    margin-left: ~'calc(100% * @{iterator} / @{cols-total} + @{cols-gutter}/2)';
                }
            }
        }
    }

    ._generateTabletColumns((@iterator + 1));
}



/* *****
    @name : ._generatePhoneColumns
    @description : Generate responsive smartphone columns width in flexbox parent
***** */
._generatePhoneColumns(@iterator:1) when(@iterator <= @cols-total) {

    .columns {

        /* NO GUTTERS */
        &.cc-no-gutter .column {
            &.cc {
                /* Width calculations without gutters */
                &-@{iterator}-s {
                    ._flex(0 0 auto);
                    width: ~'calc(100% * @{iterator} / @{cols-total})';
                    max-width: ~'calc(100% * @{iterator} / @{cols-total})';
                }

                /* Offsets calculations without gutters for phones devices */
                &-offset-@{iterator}-s {
                    margin-left: ~'calc(100% * @{iterator} / @{cols-total})';
                }
            }
        }

        /* GUTTERS */
        &.cc-gutter .column,
        .column {
            &.cc {
                /* Width calculations with gutters */
                &-@{iterator}-s {
                    ._flex(0 0 auto);
                    width: ~'calc(100% * @{iterator} / @{cols-total} - @{cols-gutter})';
                    max-width: ~'calc(100% * @{iterator} / @{cols-total} - @{cols-gutter})';
                }

                /* Offsets calculations with gutters for phones devices */
                &-offset-@{iterator}-s {
                    margin-left: ~'calc(100% * @{iterator} / @{cols-total} + @{cols-gutter}/2)';
                }

            }
        }
    }

    ._generatePhoneColumns((@iterator + 1));
}
